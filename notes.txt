
Crowdfunding marketplace from Codeplace in Rails 5

 Install default Rails 5 app

gem install rails
rails -v // 5.02
rails new stukstarter // stukstarter/ folder created,
    how to run rails 5 on c9.io?
cd stukstarter; rails server -b $IP -p $PORT;
    it's running, how to get to it?
click on 'Share' next to gear in c9 workspace, copy the 2nd link, paste in new tab and run
git init; git add --all; git commit -m "Initial setup"
git status;
git log --oneline;

git remote add origin https://github.com/ImsirovicAjdin/codeplace-three.git
git commit -m "Add remote repo"
git push -u origin master

1
INSTALL BOOTSTRAP-SASS
Sass (Syntactically Awesome Style Sheets) is a CSS extension language with lots of features, one of the most important being the ability to create variables.
Variables are "a way to store information that you want to reuse throughout your stylesheet. You can store things like colors, font stacks, or any CSS value you think you'll want to reuse".
 Check out the "Sass Basics" on Sass's website (http://sass-lang.com/guide) for more info.
Since we're working with Ruby on Rails, we'll need to implement the 'bootstrap-sass' gem , which is a Sass-powered version of Bootstrap 3.

Let's start by visiting the  gem's official github repository.
Scroll down to the "Installation" chapter to see all the information you need to get started.
https://github.com/twbs/bootstrap-sass#installation

As you can see, we need to have two gems installed: 'bootstrap-sass' and  'sass-rails';
If you notice, the 'sass-rails' gem is already in your Gemfile  (it's installed by default when you install Rails).
So, we only need to add the 'bootstrap-sass' gem.
(A)
gem 'bootstrap-sass', '~> 3.3.6'
As always, let's run the  bundle install  command to install it.
(B)
Next, we need to rename the application.css file (inside app > assets > stylesheets) as application.scss and delete all its content.
Copy the imports  on the github page and paste them on the file, as shown below.

(C) Lastly, we need to require  bootstrap-sprockets  in our  application.js  file (inside app > assets > javascripts).
./app/assets/javascripts/application.js
    //= require jquery
    //= require jquery_ujs
    //= require turbolinks
    //= require bootstrap-sprockets
    //= require_tree .

(D) Git add "bootstrap-sass" gem, application.scss, application.js

2
INSTALLING FONT AWESOME
Since we're working with Ruby on Rails, we'll need to implement the 'font-awesome-rails ' gem, "which provides the Font-Awesome web fonts and stylesheets as a Rails engine for use with the asset pipeline".
https://github.com/bokmann/font-awesome-rails
https://github.com/bokmann/font-awesome-rails#installation

The first step, as always, is to add the gem to our Gemfile .
Once again, let's run  bundle install .
Finally, since we're using Sass, we need to import Font Awesome in our  application.scss file.

// "bootstrap-sprockets" must be imported before "bootstrap" and "bootstrap/variables"
@import "font-awesome";
@import "bootstrap-sprockets";
@import "bootstrap";

git commit -m "Add font awesome"

3
CREATING THE SASS FILES
Let's create all the stylesheets  our application needs.
Let's start by creating a new file called "header.scss" and let's save it in the same directory as the  application.scss  file (app > assets > stylesheets).

Next, copy all the code highlighted below and paste it in the newly-created Sass file.
    ./app/assets/stylesheets/header.scss
    
Repeat the process for these next files:
./app/assets/stylesheets/landing.scss
./app/assets/stylesheets/projects.scss
./app/assets/stylesheets/settings.scss
./app/assets/stylesheets/variables.scss
./app/assets/stylesheets/pledges.scss
./app/assets/stylesheets/devise.scss

Now, we need to import all the files we've created on the  application.scss  file. 

Finally, we need to fetch our app's logo from the Stuk github repository and add it to the app > assets > image directory.
GIT COMMIT -m "Add scss and logo to assets"

4
USER AUTH - INSTALLING DEVISE AND CREATING THE USER MODEL

Devise is a very popular user authentication solution for Rails.

's a complete MVC solution and it's modular, so you only use what you really need.
 For more information, please visit the "Getting started" section on Devise's official github repository page (https://github.com/plataformatec/devise).
Step 1
Let's start by adding the gem  to our Gemfile .
# Devise
gem 'devise'
Step 2
As always, let's run the bundle  command to install it.
Step 3
Now, we need to run the generator, which installs an initializer  that describes all of Devise's configuration options.
rails generate devise:install

RAILS GENERATE DEVISE:VIEWS

Step 4
At this point, we can add Devise to a model.
Let's add it to a new "User" model.

rails generate devise USER

Step 5
Before we migrate the table, let's open the  migration file  and let's add an extra field: customer_id.
We'll do it now to prevent an extra migration down the road but, for now, this field doesn't have much use for us.
    ./db/migrate/[]_devise_create_users.rb
        ## Customer ID
        t.string :customer_id
        
Step 6
We're finally ready to migrate  the table.
    rake db:migrate

Step 7
Ok, let's run the server and see what we have so far.
rails s

Step 8
If you go to http://localhost:3000/users/sign_up, you can see we already have a sign up form with the CSS styles we've implemented before.

Step 9
The same goes for the http://localhost:3000/users/sign_in page.

5
STYLING DEVISE'S VIEWS
Step 1
Let's start by styling the sign in page.
Open up the "new.html.erb" file inside the views > devise > sessions directory.
We'll need to create some new divs with specific class names, to make sure Bootstrap's styles are correctly applied.
 Please visit Bootstrap's CSS page (http://getbootstrap.com/css/) for more info.
    ./app/views/devise/sessions/new.html.erb

Step 2
Also, let's improve the "Log in" button with a little Bootstrap magic.
Step 3
If you go back to the application and refresh the page, you'll see that the log in form looks a little different.
Step 4
Now, let's basically do the same for the sign up view.
Go to views > devise > registrations and open up the "new.html.erb" file.
Wrap the content with the same divs as before.
Also, we're going to add the same class to the "Sign Up" button.
Step 5
Now our sign up page looks very much like our log in page.
Step 6
OK, the final page we're going to style is the settings page, i.e., the "edit.html.erb" file inside views > devise > registrations.
Let's add the exact same divs and let's add the the same class to the "Update" button.


******************
ERROR:
rails db:migrate SQLite3::SQLException: duplicate column name
SOLUTION:
try migrating your DB to version=0 with command: rake db:migrate VERSION=0
and then run  rake db:migrate

rake db:reset_password_sent_at
rake db:migrate:reset
rake db:drop:all

Environment data not found in the schema. To resolve this issue, run: 

        bin/rails db:environment:set RAILS_ENV=development
******************

dba16fb20d2e79b96cb4dec15cb90afd21fd6ae3

##########
6
CREATING AND CONFIGURING THE PROJECT MODEL

Step 1
Let's generate the "Project" model without adding any fields.
    rails generate model Project

Step 2
Now, let's open up our  migration file  and let's add all the fields our "projects" table is going to need.
First, we need to reference the "users" table by creating a new  foreign key - this key is going to create a new field called user_id.
Our projects are also going to need a name, a short description, a description, an image url, a status, a goal and an expiration date.
    ./db/migrate/[]_create_projects.rb

Step 3
We can now migrate  the database.
    rake db:migrate

Step 4
Finally, we need to establish the relationships between the "User" and "Project" models:
    A user can have many projects.

And a project belongs to a user.

git commit -m "Create and configure the project model"

