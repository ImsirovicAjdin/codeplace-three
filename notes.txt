
Crowdfunding marketplace from Codeplace in Rails 5

 Install default Rails 5 app

gem install rails
rails -v // 5.02
rails new stukstarter // stukstarter/ folder created,
    how to run rails 5 on c9.io?
cd stukstarter; rails server -b $IP -p $PORT;
    it's running, how to get to it?
click on 'Share' next to gear in c9 workspace, copy the 2nd link, paste in new tab and run
git init; git add --all; git commit -m "Initial setup"
git status;
git log --oneline;

git remote add origin https://github.com/ImsirovicAjdin/codeplace-three.git
git commit -m "Add remote repo"
git push -u origin master

1
INSTALL BOOTSTRAP-SASS
Sass (Syntactically Awesome Style Sheets) is a CSS extension language with lots of features, one of the most important being the ability to create variables.
Variables are "a way to store information that you want to reuse throughout your stylesheet. You can store things like colors, font stacks, or any CSS value you think you'll want to reuse".
 Check out the "Sass Basics" on Sass's website (http://sass-lang.com/guide) for more info.
Since we're working with Ruby on Rails, we'll need to implement the 'bootstrap-sass' gem , which is a Sass-powered version of Bootstrap 3.

Let's start by visiting the  gem's official github repository.
Scroll down to the "Installation" chapter to see all the information you need to get started.
https://github.com/twbs/bootstrap-sass#installation

As you can see, we need to have two gems installed: 'bootstrap-sass' and  'sass-rails';
If you notice, the 'sass-rails' gem is already in your Gemfile  (it's installed by default when you install Rails).
So, we only need to add the 'bootstrap-sass' gem.
(A)
gem 'bootstrap-sass', '~> 3.3.6'
As always, let's run the  bundle install  command to install it.
(B)
Next, we need to rename the application.css file (inside app > assets > stylesheets) as application.scss and delete all its content.
Copy the imports  on the github page and paste them on the file, as shown below.

(C) Lastly, we need to require  bootstrap-sprockets  in our  application.js  file (inside app > assets > javascripts).
./app/assets/javascripts/application.js
    //= require jquery
    //= require jquery_ujs
    //= require turbolinks
    //= require bootstrap-sprockets
    //= require_tree .

(D) Git add "bootstrap-sass" gem, application.scss, application.js

2
INSTALLING FONT AWESOME
Since we're working with Ruby on Rails, we'll need to implement the 'font-awesome-rails ' gem, "which provides the Font-Awesome web fonts and stylesheets as a Rails engine for use with the asset pipeline".
https://github.com/bokmann/font-awesome-rails
https://github.com/bokmann/font-awesome-rails#installation

The first step, as always, is to add the gem to our Gemfile .
Once again, let's run  bundle install .
Finally, since we're using Sass, we need to import Font Awesome in our  application.scss file.

// "bootstrap-sprockets" must be imported before "bootstrap" and "bootstrap/variables"
@import "font-awesome";
@import "bootstrap-sprockets";
@import "bootstrap";

git commit -m "Add font awesome"

3
CREATING THE SASS FILES
Let's create all the stylesheets  our application needs.
Let's start by creating a new file called "header.scss" and let's save it in the same directory as the  application.scss  file (app > assets > stylesheets).

Next, copy all the code highlighted below and paste it in the newly-created Sass file.
    ./app/assets/stylesheets/header.scss
    
Repeat the process for these next files:
./app/assets/stylesheets/landing.scss
./app/assets/stylesheets/projects.scss
./app/assets/stylesheets/settings.scss
./app/assets/stylesheets/variables.scss
./app/assets/stylesheets/pledges.scss
./app/assets/stylesheets/devise.scss

Now, we need to import all the files we've created on the  application.scss  file. 

Finally, we need to fetch our app's logo from the Stuk github repository and add it to the app > assets > image directory.
GIT COMMIT -m "Add scss and logo to assets"

4
USER AUTH - INSTALLING DEVISE AND CREATING THE USER MODEL

Devise is a very popular user authentication solution for Rails.

's a complete MVC solution and it's modular, so you only use what you really need.
 For more information, please visit the "Getting started" section on Devise's official github repository page (https://github.com/plataformatec/devise).
Step 1
Let's start by adding the gem  to our Gemfile .
# Devise
gem 'devise'
Step 2
As always, let's run the bundle  command to install it.
Step 3
Now, we need to run the generator, which installs an initializer  that describes all of Devise's configuration options.
rails generate devise:install

RAILS GENERATE DEVISE:VIEWS

Step 4
At this point, we can add Devise to a model.
Let's add it to a new "User" model.

rails generate devise USER

Step 5
Before we migrate the table, let's open the  migration file  and let's add an extra field: customer_id.
We'll do it now to prevent an extra migration down the road but, for now, this field doesn't have much use for us.
    ./db/migrate/[]_devise_create_users.rb
        ## Customer ID
        t.string :customer_id
        
Step 6
We're finally ready to migrate  the table.
    rake db:migrate

Step 7
Ok, let's run the server and see what we have so far.
rails s

Step 8
If you go to http://localhost:3000/users/sign_up, you can see we already have a sign up form with the CSS styles we've implemented before.

Step 9
The same goes for the http://localhost:3000/users/sign_in page.

5
STYLING DEVISE'S VIEWS
Step 1
Let's start by styling the sign in page.
Open up the "new.html.erb" file inside the views > devise > sessions directory.
We'll need to create some new divs with specific class names, to make sure Bootstrap's styles are correctly applied.
 Please visit Bootstrap's CSS page (http://getbootstrap.com/css/) for more info.
    ./app/views/devise/sessions/new.html.erb

Step 2
Also, let's improve the "Log in" button with a little Bootstrap magic.
Step 3
If you go back to the application and refresh the page, you'll see that the log in form looks a little different.
Step 4
Now, let's basically do the same for the sign up view.
Go to views > devise > registrations and open up the "new.html.erb" file.
Wrap the content with the same divs as before.
Also, we're going to add the same class to the "Sign Up" button.
Step 5
Now our sign up page looks very much like our log in page.
Step 6
OK, the final page we're going to style is the settings page, i.e., the "edit.html.erb" file inside views > devise > registrations.
Let's add the exact same divs and let's add the the same class to the "Update" button.


******************
ERROR:
rails db:migrate SQLite3::SQLException: duplicate column name
SOLUTION:
try migrating your DB to version=0 with command: rake db:migrate VERSION=0
and then run  rake db:migrate

rake db:reset_password_sent_at
rake db:migrate:reset
rake db:drop:all

Environment data not found in the schema. To resolve this issue, run: 

        bin/rails db:environment:set RAILS_ENV=development
******************

dba16fb20d2e79b96cb4dec15cb90afd21fd6ae3

##########
6
CREATING AND CONFIGURING THE PROJECT MODEL

Step 1
Let's generate the "Project" model without adding any fields.
    rails generate model Project

Step 2
Now, let's open up our  migration file  and let's add all the fields our "projects" table is going to need.
First, we need to reference the "users" table by creating a new  foreign key - this key is going to create a new field called user_id.
Our projects are also going to need a name, a short description, a description, an image url, a status, a goal and an expiration date.
    ./db/migrate/[]_create_projects.rb

Step 3
We can now migrate  the database.
    rake db:migrate

Step 4
Finally, we need to establish the relationships between the "User" and "Project" models:
    A user can have many projects.

And a project belongs to a user.

git commit -m "Create and configure the project model"

############
7
 ADDING THE NAVBAR
 
Step 1
The first thing we need to do is to create a new "header" partial, where we'll put the navbar.
touch app/views/layouts/_header.html.erb

 Step 2
Next, let's go to the "Components" section of Bootstraps' website and let's scroll down to the "Navbar" component.
Click on the "Copy" button shown below, and paste the content inside the partial.
    ./app/views/layouts/_header.html.erb

Step 3
Let's remove some stuff we don't need, like the dropdown and the form.

Step 4
If we clean up our code a little bit, we should have something like this.
./app/views/layouts/_header.html.erb

<nav class="navbar navbar-default">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="#">Brand</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav navbar-right">
        <li></li>
        <li></li>
      </ul>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>

Step 5
Let's add the header partial to our  application.html.erb  file, just so we can see what we've got so far.
./app/views/layouts/application.html.erb
<!DOCTYPE html>
<html>
<head>
  <title>Stukstarter</title>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= csrf_meta_tags %>
</head>
<body>

<%= render "layouts/header" %>
<%= yield %>

</body>
</html>

Step 6
As always, you need to start the server.
( If you're logged in, open up a new browser window in incognito mode.)

 Step 7
As you can see, your application now has a navigation bar.

git commit -m "Add the navbar"

############
8
CUSTOMIZING THE NAVBAR

Step 1
We're going to start by adding the "Stukstarter" logo where the "Brand" element used to be.
As you can see in the code highlighted below, we've added an  image tag  with just the file name - there's no need for the path, since the image is in the default directory (app > assets > images).
Also, we've added a "logo" class to our element. This class has already been styled in the stylesheets we added in the beginning of this course.
Later, we'll link the image to the root_path, but since this path isn't defined yet, for now our link's destination is the current page.
./app/views/layouts/_header.html.erb

Step 2
Take a look at your cool new logo!

Step 3
Next, we need to alter the navbar options according to the user's status.
For this, we'll need to add an if statement to our partial:
if the user's signed in, he/she should be able to start a new project, see the account settings, and sign out;
if not, he/she should be able to sign up and log in;
Note that we haven't defined a lot of the paths we're going to need, so for now, most of our links are going to the current page ("#").

Step 4
As you can see, our navbar options now change according to our status.

git commit -m "Dynamically Customize the navbar"

############
9
DEFINING THE ROOT PATH

Step 1
Our application is going to have a landing page (the root path) that's going to display all the projects in our table.
This is going to be the "index" action  of the "projects" controller .
So, first thing we need is a "projects" controller. Let's create one!
rails g controller projects

Since we've already created a stylesheet called "projects.scss", this generator is going to raise a conflict regarding that file. Press the "n" key to skip it. Otherwise, the generator is going to override it.

Step 2
Next, we need to go to the controller and define the  "index" action .
./app/controllers/projects_controller.rb

class ProjectsController < ApplicationController
  def index
  end
end

Step 3
We're ready to define our  root route , inside the  routes.rb file, as the "index" action of the "projects" controller.

./config/routes.rb
Rails.application.routes.draw do
  root 'projects#index'
  
 Step 4
Ok, so all that's left to do is to add a template  for this action.
Let's do it by creating a new "index.html.erb" file inside the "projects" directory.
 touch app/views/projects/index.html.erb

Step 5
We'll come back to this template in the next chapter, but for now, let's just put a level 1 heading with the text "Hello, world".
./app/views/projects/index.html.erb
<h1>Hello, World</h1>

Step 6
If we go to the root of the application, we should see the navbar and the "Hello, world" message.

git commit -m "Define the root path"

###########
10
CREATING THE CAROUSEL

Step 1
Our landing page is going to have a carousel, so we need to start by creating a partial where we'll put this element.
touch app/views/projects/_carousel.html.erb

Step 2
Next, let's go to Bootstrap's "Javascript" page and let's scroll down to the "Carousel" chapter.
Click on the "Copy" button, as shown below, and paste all the content on the partial
./app/views/projects/_carousel.html.erb

        <div id="carousel-example-generic" class="carousel slide" data-ride="carousel">
          <!-- Indicators -->
          <ol class="carousel-indicators">
            <li data-target="#carousel-example-generic" data-slide-to="0" class="active"></li>
            <li data-target="#carousel-example-generic" data-slide-to="1"></li>
            <li data-target="#carousel-example-generic" data-slide-to="2"></li>
          </ol>
        
          <!-- Wrapper for slides -->
          <div class="carousel-inner" role="listbox">
            <div class="item active">
              <img src="..." alt="...">
              <div class="carousel-caption">
                ...
              </div>
            </div>
            <div class="item">
              <img src="..." alt="...">
              <div class="carousel-caption">
                ...
              </div>
            </div>
            ...
          </div>
        
          <!-- Controls -->
          <a class="left carousel-control" href="#carousel-example-generic" role="button" data-slide="prev">
            <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
          </a>
          <a class="right carousel-control" href="#carousel-example-generic" role="button" data-slide="next">
            <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
          </a>
        </div>

Step 3
Let's remove the heading and let's add the partial to the index view.
./app/views/projects/index.html.erb
<%= render "projects/carousel" %>

Step 4
Let's take a look at our application to see if the carousel works "straight out of the box" or if we need to make some adjustments.
rails s

Step 5
As you can see, the carousel is working correctly, even though we don't have any images yet.

Step 6
Of course, the idea is to have a dynamic carousel and not to hardcode the images'URLs.
However, just for test purposes, let's add an image to the carousel.
./app/views/projects/_carousel.html.erb

  <!-- Wrapper for slides -->
  <div class="carousel-inner" role="listbox">
    <div class="item active">
      <img src="http://images.freeimages.com/images/previews/5b0/rubik-s-cube-1-1424892.jpg" alt="...">

Step 7
As you can see, the image is displayed correctly.
We can see the 3 little buttons below and the arrows.
Everything's OK, let's move on!

git commit -m "Create the carousel"

##############
11
DISPLAYING THE PROJECTS

Step 1
Below the carousel, we're going to create a couple of divs with Bootstrap specific classes where we're going to display the projects.
./app/views/projects/index.html.er
<%= render "projects/carousel" %>

<div class="container">
	<br><br><br>
	<h3 class="project-subtitle">Our Project</h3>
	<div class="row">
		
	</div>
</div>

Step 2
Next, let's create a "project" partial.
touch app/views/projects/_project.html.erb

Step 3
Our partial is going to include the project's title, description, progress bar and stats, as shown below.

./app/views/projects/_project.html.erb
        <div class="col-md-4 col-sm-6 col-xs-12">
        
          <div class="project-box">
            <img src="http://images.freeimages.com/images/previews/5b0/rubik-s-cube-1-1424892.jpg" alt="..." width="100%" height="200px">
            <div class="description-box">
        
              <!-- Project Title -->
              <div class="title">
        	  </div>
        
        	  <!-- Project Description -->
        	  <div class="description">
        	    This is a description
        	  </div>
        
        	  <!-- Project Progress Bar -->
        	  <div clas="project-bar">
        	    <div class="progress">
        	      <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="100%" aria-valuemin="0" aria-valuemax="100" style="width:100%">
        	    	<span class="sr-only">100% Complete (Success)</span>
        	      </div>
        	    </div>
        	  </div>
        
        	  <!-- Project Stats -->
        	  <div class="stats">
        	    <ul>
        	  	  <!-- percentage of funding -->
        	  	  <li>100% <br><span class="label">funded</span></li>
        	  	  <!-- total amount pledged (dollars) -->
        	  	  <li>$1000 <br><span class="label">pledged</span></li>
        	  	  <!-- days to go 'till deadline -->
        	  	  <li>10 <br><span class="label">days to go</span></li>
        	    </ul>
              </div>
        
            </div>
          </div>
        
        </div>
        
Step 4
Let's render the partial in the index template.
./app/views/projects/index.html.er
<%= render "projects/carousel" %>

<div class="container">
	<br><br><br>
	<h3 class="project-subtitle">Our Project</h3>
	<div class="row">
		<%= render "project" %>
	</div>
</div>

Step 5
OK, let's see how this partial looks in our landing page.
rails s

As you can see, we now have a project block with all the project's info.

Step 6
Our landing page is missing something ... there's no way for us to create a new project.
So, let's add a new link below the project blocks.
Note that the path is not yet configured, so the link's destination is the current page.
./app/views/projects/index.html.er
...
	<h3 class="project-subtitle">Our Project</h3>
	<div class="row">
		<%= render "project" %>
	</div>
</div>

<div class="container text-center">
	<br><br><br>
	<h2>Create your first project</h2>
	<%= link_to "Start project!", "#", class: "btn btn-success btn-lg" %>
</div>

Step 7
Now we have a problem ... this button should only appear when the user doesn't have any projects.
Step 8
Let's fix that by creating an if/else statement:
if our user has projects to display, we should display them;
else, we should display the "Start project" button;
As you can see, our if statement is using the @displayed_projects  global variable  which doesn't exist.
./app/views/projects/index.html.er
        <% if @displayed_projects.any? %>
        
        <%= render "projects/carousel" %>
        
          <div class="container">
        	<br><br><br>
        	<h3 class="project-subtitle">Our Project</h3>
        	<div class="row">
        	  <%= render "project" %>
        	</div>
          </div>
        
        <% else %>
        
          <div class="container text-center">
        	<br><br><br>
        	<h2>Create your first project</h2>
        	<%= link_to "Start project!", "#", class: "btn btn-success btn-lg" %>
          </div>
        
        <% end %>

Step 9
So, inside the projects controller, let's state that the  @displayed_projects  global variable  corresponds to the 4 first entries of the "projects" table.

./app/controllers/projects_controller.rb
class ProjectsController < ApplicationController
  def index
    @displayed_projects = Project.take(4)
  end
end

 Step 10
We also need to define a @projects  global variable  in the controller, which is going to represent all the entries in the "projects" table.

./app/controllers/projects_controller.rb
class ProjectsController < ApplicationController
  def index
    @projects = Project.all
    @displayed_projects = Project.take(4)
  end
end

Step 11
In the "index" view, we can now replace the "project" partial with the  global variable  @projects.

./app/views/projects/index.html.er
        <% if @displayed_projects.any? %>
        
        <%= render "projects/carousel" %>
        
          <div class="container">
        	<br><br><br>
        	<h3 class="project-subtitle">Our Project</h3>
        	<div class="row">
        	  <%= render @projects %>
        	</div>
          </div>
        
        <% else %>
        
          <div class="container text-center">
        	<br><br><br>
        	<h2>Create your first project</h2>
        	<%= link_to "Start project!", "#", class: "btn btn-success btn-lg" %>
          </div>
        
        <% end %>

Step 12
Now, let's go back to our application.
rails s

Step 13
As you can see, since we don't have any projects, all we can see for now is the "Create your first project" button.

git commit -m "Display the projects"

#############
12
INSTALLING THE "ANNOTATE MODELS" GEM
We're going to install a really useful gem called "annotate models", which does exactly what the name says: it annotates schema information for you.
 Please visit the gem's official github repository (https://github.com/ctran/annotate_models) for more info.
Step 1
As always, the first thing we need to do is to add the gem to the Gemfile .
# Annotate Models
gem 'annotate', github: 'ctran/annotate_models'
Step 2
Let's install the gem.
bundle install # won't work, use 'bundle update' to push through
Step 3
To start using the gem , all you need to do is type the following command.
annotate
As you can see, the output for the command is the list of annotated models, in this case, "Project" and "User".
Step 4
Notice that now, when we open a model, we can see the schema information above the model's settings.
This is going to be very useful when we need to create test projects directly on the Rails console.

git commit -m "Install the annotate-models gem"

#############
13
CREATING A NEW TEST PROJECT
In order to test our features, our "projects" table must be populated. 
Since we still haven't built an interface, like a form, to create new projects, let's do it directly on the console.

Step 1
So, first thing we need to do is start the  Rails console .
rails c

Step 2
Next, let's create a project with the following parameters:
user_id:1
name:"Kube"
short_description:"It's my first project"
description:"This is my long description!"
image_url:"http://images.freeimages.com/images/previews/5b0/rubik-s-cube-1-1424892.jpg"
goal:1000

p = Project.new(user_id:1, name:"Kube", short_description:"It's my first project", description:"This is my long description!", image_url:"http://images.freeimages.com/images/previews/5b0/rubik-s-cube-1-1424892.jpg", goal:1000 )
p.save                                                            
Step 3
Let's check that everything is OK.
We should only have one project in our database, with the parameters you've defined before.
Project.count
Project.first

git commit -m "Create a new test project"


#############
14
DYNAMIC CAROUSEL
Step 1
Now that we have a project, we can start creating a truly dynamic carousel.
Let's start by passing the "projects" variable to the carousel partial, which is going to include the 4 displayed projects.
./app/views/projects/index.html.erb
<% if @displayed_projects.any? %>

<%= render "carousel", projects: @displayed_projects %>
....
Step 2
Starting with the carousel indicators, we're going iterate through all of the projects displayed and fill out the "data-slide-to" and "class" fields dynamically.
As you can see in the code highlighted below, if i is zero, we know the current project is the first one, which means this should be the project with the "active" class.
./app/views/projects/_carousel.html.erb
    <div id="carousel-example-generic" class="carousel slide" data-ride="carousel">
      <!-- Indicators -->
      <ol class="carousel-indicators">
          <% projects.count.times do |i| %>
            <li data-target="#carousel-example-generic" data-slide-to="<%= i %>" class="<%= "active" if i.zero? %>"></li>
          <% end %>
      </ol>
    
      <!-- Wrapper for slides -->
      ...

Step 3
Now, for the slides, we need to remove all the stuff we don't need and we need to add the same logic as before: for each project in the "displayed_objects" variable, display the project's image, name and short description.
Also, we've added a link to "View Project", which for now just links to the current page ("#").
./app/views/projects/_carousel.html.erb
....
          <!-- Wrapper for slides -->
          <div class="carousel-inner" role="listbox">
            <% projects.each_with_index do |project, index| %>
              <div class="item <%= "active" if index.zero? %>">
                <img src="<%= project.image_url %>" alt="...">
                <div class="carousel-caption">
                  <div class="container">
                    <h2><%= project.name %></h2>
                    <p><%= project.short_description %></p>
                    <%= link_to "View Project", "#", class: "btn btn-success btn-lg" %>
                  </div>
                </div>
              </div>
            <% end %>
          </div>
        
            <!-- Controls -->
....

Step 4
As you can see, we now have a truly dynamic carousel.
However, this is hard to test, since we only have one slide that corresponds to our only entry in the database.

git commit -m "Add dynamic carousel"




#############
15
DYNAMIC PROJECTS
Step 1
Let's slowly remove all the hardcoded data in the project partial, and let's make the project blocks dynamic.
./app/views/projects/_project.html.erb
Step 2
If you go back to the landing page, you'll now see that the project block's image, title and short description are all being filled out dynamically. However, all the stats are still hardcoded.
git commit -m "Add dynamic projects"

#############
16
NEW PROJECT FORM
Step 1
Let's start by creating the routing for our projects.
config/routes.rb
    Rails.application.routes.draw do
      root 'projects#index'
      devise_for :users
      resources :projects
      # The priority is based upon order of creation: first created -> highest priority.
      # See how all your routes lay out with "rake routes".
Step 2
Next, inside the "projects" controller , let's add all the actions we still haven't created, and let's start by defining the "new" action.
Also, let's create a before_action  that will prevent users from accessing the "projects" controller when they're not logged in, with the exception of the "index" and "show" actions. This means that non-signed in users will still be able to see the landing page and the project info page.
    class ProjectsController < ApplicationController
        before_action :authenticate_user!, except: [:index, :show]
        def index
            @projects = Project.all
            @displayed_projects = Project.take(4)
        end
        
        def show
        end
        
        def new
            @project = Project.new
        end
        
        def edit
        end
    
    end
    
Step 3
As you can probably guess, we're going to need a template for the "new" action.
    touch app/views/projects/new.html.erb
Step 4
Inside this file, we're going to render a partial with a form that will allow users to create new projects.
    <div class="container">
    	<h1>Create a new Project</h1>
    	<%= render 'form' %>
    </div>
Step 5
Since we're going to need a form, let's use a very helpful gem called "simple_form".
 Please visit the gem's official github repository (https://github.com/plataformatec/simple_form) for more info.
As always, let's begin by adding the gem to the Gemfile .
    
    # Simple Form
    gem 'simple_form'

Step 6
We need to install the gem.
    bundle install

Step 7
Finally, let's run the generator with a Bootstrap option, so our forms use Bootstrap's styles.
    rails generate simple_form:install --bootstrap

Step 8
Next, let's create the "form" partial.
    touch app/views/projects/_form.html.erb

Step 9
Take a look at the code highlighted below.
As you can see, inside our new form, we haven't specified the input type, just the input field's name. One of the very cool things about "simple_form" is that it infers the type of input it must provide.
The exception, in this case, is the "description" field, which we've specified as a "wisyhtml5" - this is a very cool WYSIWYG gem we're going to install in the next step.
./app/views/projects/_form.html.erb
    <%= simple_form_for(@project, html: { class: 'form-horizontal' }) do |f| %>
    	<%= f.input :name %>
    	<%= f.input :short_description %>
    	<%= f.input :description, as: :wysihtml5 %>
    	<%= f.input :goal %>
    	<%= f.input :image_url %>
    	<div class="actions">
    		<%= f.button :submit %>
    	</div>
    <% end %>

Step 10
So, let's install the "bootstrap-wysihtml5-rails" gem.
Again, let's add the gem to the Gemfile .
Please visit the gem's github official repository (https://github.com/Nerian/bootstrap-wysihtml5-rails) for more info.

    # Wysiwyg Bootstrap
    gem 'bootstrap-wysihtml5-rails', github: 'nerian/bootstrap-wysihtml5-rails'
    

Step 11
And let's run the  bundle install  command.
    bundle install
    
Step 12
Since we're using Sass, we need to import the following line on the  application.scss  file.
./app/assets/stylesheets/application.scss
    // "bootstrap-sprockets" must be imported before "bootstrap" and "bootstrap/variables"
    @import "font-awesome";
    @import "bootstrap-sprockets";
    @import "bootstrap";
    
    // sass files
    @import "header";
    @import "landing";
    @import "projects";
    @import "settings";
    @import "variables";
    // THIS HERE: *****************
    // wysiwyg bootstrap
    @import "bootstrap-wysihtml5/bootstrap3-wysihtml5";

Step 13
Next, we need to require bootstrap-wysihtml5 inside the  application.js  file.
./app/assets/js/application.js
    ....
    //= require turbolinks
    //= require bootstrap-sprockets
    //= require bootstrap-wysihtml5
    //= require_tree .
Step 14
So, let's start the server to see what our form looks like.
    rails s
    
Step 15
If go to the new project path (<ws>/projects/new) you'll see that our "new project" form is already looking awesome

#############
17
CREATING NEW PROJECTS
Step 1
Now that we've created the form, let's make it functional.
Let's start by defining the  "create" action in the "projects" controller.
Take a look at the highlighted code.
As you can see, we've added an if/else statement inside the "create" action.
if the project is saved, we're going to redirect the user to the the project's info page ("show" view) and display a success message;
if not, we're going to display the "edit" view.
Finally, we've created the private method  project_params, which is passing the project's parameters as arguments to the create action.

./app/controllers/projects_controller.rb
    
      def create
        @project = current_user.projects.build(project_params)
    
        respond_to do |format|
          if @project.save
            format.html { redirect_to @project, notice: "Project was successfully created" }
            format.json { render :show, status: :ok, location: @project }
          else
            format.html { redirect_to :edit }
            format.json { render json: @project.errors, status: :unprocessable_entity }
          end
        end
      end
    
      private
    
        def project_params
          params.require(:project).permit(:name, :short_description, :description, :goal, :image_url, :expiration_date)
        end
    
    end

.EOF

Step 2
We still need to define the "show" and "edit" actions, but before we do that, let's just create another private method - set_project - that gets the project from the params.
We're going to invoke this method within a new before action , which is going to be available only for the show, edit, update and destroy actions.
./app/controllers/projects_controller.rb
<<BOF:
    class ProjectsController < ApplicationController
      before_action :authenticate_user!, except: [:index, :show]
      before_action :set_project, only: [:show, :edit, :update, :destroy]
...
EOF:
...
  private

    def set_project
      @project = Project.find(params[:id])
    end

    def project_params
...

Step 3
Let's go back to our application, sign in and go straight to our form: http://localhost:3000/projects/new.
Fill out the form with some random data 

Step 4
If you try to submit the form now, you'll see a "Missing template" error, which means the form submission went through.

Step 5
So, let's create the missing template!

Step 6
Let's go back to the form, fill it out again and submit it.
Since our show template is still empty,  you're going to see a blank page, but if you go back to the application's root, you can see the new project on the landing page.
Also, as you can see, the carousel is correctly displaying both of our project images.



#############
18
UPDATING AND DELETING PROJECTS
Step 1
The first thing we're going to need is a template for the "update" action. 
touch app/views/projects/edit.html.erb

Step 2
This file is going to be very simple, since we're going to render the form we've already created.
Below that, we're going to add 2 links, one to the project's info page ("show view") and one back to the landing page (projects_path).
./app/views/projects/edit.html.erb
    <div class="container">
    	<h1>Editing Project</h1>
    	<%= render 'form' %>
    
    	<%= link_to 'Show', @project %>
    	<%= link_to 'Back', projects_path %>
    </div>

Step 3
Next, let's create the "update" action inside our controller.
The code is basically the same as in the "create" action, we just need to alter the if statement:
if the project is updated with the correct parameters, redirect the user to the project's info page ("show" view) and display a success message;
if not, show the current view.
./app/controllers/projects_controller.rb
...
    end
  
    def update
      respond_to do |format|
        if @project.update(project_params)
          format.html { redirect_to @project, notice: "Project was successfully updated" }
          format.json { render :show, status: :ok, location: @project }
        else
          format.html { render :edit }
          format.json { render json: @project.errors, status: :unprocessable_entity }
        end
      end
    end
  
    private
...

Step 4
Let's go back to our application and let's try to edit the project we've created, which is the 2nd in our database.
So, let's go straight to the following link: http://localhost:3000/projects/2/edit.
As you can see, everything seems to be in order, all our data is there.

Step 5
Let's try to change something, like the goal.

Step 6
If you click on the "Update Project" button, you won't be able to see anything, since the "show" template is still blank.
But going back to the "edit" view, you can see that our goal is now updated.

Step 7
The only thing we need to do in order to delete a project is to configure the  "destroy" action  inside our controller.
This one is a little simpler than the rest, we only need to destroy the entry and redirect the user to the landing page. 
./app/controllers/projects_controller.rb
....
  end

  def destroy
    @project.destroy
    respond_to do |format|
      format.html { redirect_to project_path, notice: "Project was successfully destroyed" }
      format.json { head :no_content }      
    end
  end

  private
....
git commit -m "Add the update and delete projects functionality"

#############
19
EDITING THE SHOW VIEW
Step 1
At last, let's edit the "show" template.
For now, let's include the project name (we can access the @project  global variable  since it was set in the  before_action) and the project's image with a link to the current page.
./app/views/projects/show.html.erb

    <div class="container">
    	<div class="row">
      		<div class="col-md-12 text-center">
      			<h2 class="project-title"><%= @project.name %></h2>
      		</div>
      	</div>
      	<div class="row">
      		<div class="col-md-8">
      			<%= link_to image_tag(@project.image_url, alt: @project.name, width: '100%'), project_path(@project) %>
      		</div>
      	</div>
      </div>
    </div>
    
Step 2
Let's take a look at what we have so far.

Step 3
To see the second project on your database, go directly to http://localhost:3000/projects/2.
If everything's OK, you should see something like this.

Step 4
At the moment, everything in our application is available to all users, but by the end of this course you'll be able to define different authorization levels. We're going to implement this down the road with the help of the ' Cancancan ' gem.
Since we already know this, let's create a couple of links that will later on only be visible to the project's owner: edit and delete.

./app/views/projects/show.html.erb
....
				<%= link_to image_tag(@project.image_url, alt: @project.name, width: '100%'), project_path(@project) %>
			</div>
			<div class="col-md-4">
				<div class="project-mgmt">
					<%= link_to 'Edit', edit_project_path(@project) %>
					<%= link_to 'Delete', project_path(@project), method: :delete, data: {confirm: "Are you sure?"} %>
				</div>
			</div>
		</div>
	</div>
</div>
.EOF

Step 5
This is what our page looks like with the links we've added.

Step 6
You might have noticed that our image is not centered.
This is because we're going to include the project's stats on the right side of the page.
So, let's create the partial that's going to display this info.
    touch app/views/projects/_stats.html.erb
    
Step 7
And let's render  the partial inside the "show" template.
....
					<%= link_to 'Delete', project_path(@project), method: :delete, data: {confirm: "Are you sure?"} %>
				</div>
				<%= render 'stats' %>
			</div>
		</div>
	</div>
</div>
<<EOF

Step 8
We'll come back to this partial in a later chapter, for now, let's complete the "show" template.
As you can see, we've added two links, one to "See project backers" and one to "Back this project".
For now, both of them are linking to the current page, since we still haven't created the necessary paths.
Also, the links shouldn't appear at the same time:
the project's owner should only be able to see the project's backers;
the rest of the users should only be able to back the project.
Don't worry, we'll take care of this part a little later on this course.
Note that we've also added a p tag with a placeholder message..
This element will be later changed so the number of days to go match the difference between the current day and the expiration date defined for each project in our database.
./app/views/projects/show.html.erb
				</div>
				<%= render 'stats' %>
				<%= link_to 'See project backers', "#", class: "btn btn-success btn-lg" %>
				<%= link_to 'Back this project', "#", class: "btn btn-success btn-lg" %>
				<p class="project-time">This project will expire in 3 days.</p>
			</div>
		</div>
	</div>
</div>

Step 9
Finally, let's create a new row where our short description is going to be.
For now, let's add some placeholder text.

./app/views/projects/show.html.erb
		<!-- small description -->
		<div clas="row">
			<div class="col-md-8">
				<p class="project-small-description">Project small description.</p>
			</div>
		</div>

	</div>
</div>
<<EOF

Step 10
Let's go back to the application and see what we have so far.
As you can see, our "show" template is looking more and more like an actual crowdfunding website!

Step 11
Finally, let's add the divs where our rewards are going to be rendered.
./app/views/projects/show.html.erb
EOF:
<!-- rewards -->
<div class="container">
	<div class="row">
		<div class="col-md-8">
			<h3 class="project-subtitle">Rewards</h3>
			<p><%= @project.description %></p>
		</div>
		<div class="col-md-4">
			<p>Rewards will be rendered in here ...</p>
			<%= link_to 'Add Reward', "#", class: "btn btn-primary" %>
		</div>
	</div>
</div>

Step 12
The last thing we need to do is to edit the "stats" partial.
As you can see, we've added a couple of Bootstrap specific divs, and most importantly, we've hardcoded the number of backers, the goal and the number of days to go..
./app/views/projects/_stats.html.erb
    <div class="project-stats">
    	<div class="row">
    
    		<!-- number of backers -->
    		<div class="col-xs-4 col-sm-12">
    			<div class="val">
    				10
    			</div>
    			<div class="lab">
    				backers
    			</div>
    		</div>
    
    		<!-- goal -->
    		<div class="col-xs-4 col-sm-12">
    			<div class="val">
    				1000$
    			</div>
    			<div class="lab">
    				goal
    			</div>
    		</div>
    
    		<!-- days to go -->
    		<div class="col-xs-4 col-sm-12">
    			<div class="val">
    				4
    			</div>
    			<div class="lab">
    				days to go
    			</div>
    		</div>
    
    	</div>
    </div>
    
Step 13
Our application should now look something like this.
Of course in the following chapters, we'll make this fields dynamic, for now, we can see what this page is supposed to look like when we're done.

git commit -m "Edit the show view"

#############
20
CREATING THE REWARD MODEL
Step 1
As usual, let's start by generating the model.
However, instead of adding the fields in the generator, let's do this later on the  migration file .
rails g model Reward

Step 2
So, let's open up the migration file and let's add the necessary fields.
We'll begin by adding a  foreign key  to reference the "projects" table, since our rewards are going to be linked to a specific project.
Then, we'll also need:
the reward's description;
the reward's value;
the shipping value;
the number of rewards available;
the reward's estimated delivery date.

./db/migrate/[]_devise_create_rewards.rb
class CreateRewards < ActiveRecord::Migration
  def change
    create_table :rewards do |t|

      t.references  :project, index: true, foreign_key: true
      t.text        :description
      t.integer     :value
      t.decimal     :shipping, precision: 8, scale: 2
      t.integer     :number_available
      t.date        :estimated_delivery

      t.timestamps null: false
...

Step 3
Now, let's establish the relationships between models.
./app/models/reward.rb
class Reward < ActiveRecord::Base
  belongs_to :project
end

While a project has many rewards.
./app/models/project.rb
(<<EOF):
class Project < ActiveRecord::Base
  belongs_to :user
  has_many :rewards
end

Step 4
Next, let's add some validations to our "Reward" model:
we want to make sure the reward's description,  value and estimated delivery fields are filled out;
the reward's value has to be a number >= 0;
the number or available rewards has to be >= 0 or nil;
the estimated delivery date must be later than the current date.
./app/models/reward.rb
    class Reward < ActiveRecord::Base
    
      belongs_to :project
    
      validates :description, :value, :estimated_delivery, presence: true
      validates :value, numericality: { greater_than_or_equal_to: 0 }
      validates :number_available, numericality: { greater_than_or_equal_to: 0, allow_nil: true }
      validates :estimated_delivery, date: { after: Date.today }
    
    end
    
Step 5
As you've probably noticed, we're using a helper  to validate the date.
We're doing this with the help of a gem  called 'date_validator'.
 Please visit the gem's github official repository (https://github.com/codegram/date_validator) for more info.
So, let's add this gem to our Gemfile .

# Date Validator
gem 'date_validator'

Step 6
And let's install the gem.
  bundle install
  
Step 7
Let's also validate the presence for all the fields in the "Project" model.
./app/models/project.rb

  has_many :rewards

  validates :name, :short_description, :description, :image_url, :expiration_date, :goal, presence: true

end

Step 8
We're ready to migrate  the database.
  rake db:migrate

Step 9
Also, let's again use the "annotates_models" gem to add some schema info to our "Reward" model.
    >_Terminal
    $ annotate
    => Annotated (1): Reward
    
As you can see, we've annotated the "Reward" model, since the other two were already annotated.

git commit -m "Create the reward model"


#############
21
MORE DATE GEMS
Working with dates can be a little complicated with Rails.
Luckily, there are some gems that can do all the hard work for us: "datetimepicker-rails" and "momentjs-rails".

Step 1
Datetime picker is a very cool gem that "packages the bootstrap-datetimepicker for Rails asset pipeline and creates the Simple Form custom fields for your project".
 Please visit the gem's github official repository (https://github.com/zpaulovics/datetimepicker-rails) for more info.

Step 2
MomentJS, on the other hand, is "a lightweight javascript date library for parsing, manipulating, and formatting dates". We're going to install the 'momentjs-rails' gem, which is basically the Moment.js JavaScript library ready to play with the Rails Asset Pipeline.
 Please visit the gem's github official repository (https://github.com/derekprior/momentjs-rails) for more info.

Step 3
Let's add them both to our Gemfile .
# Date Validator
gem 'date_validator'

# Date Picker
gem 'datetimepicker-rails', github: 'zpaulovics/datetimepicker-rails', branch: 'master', submodules: true

# MomentJS
gem 'momentjs-rails'

Step 4
And let's install them.
  bundle install
  
Step 5
We need some additional steps to install the datetimepicker-rails gem .
First, let's require "moment", "bootstrap-datetimepicker" and "pickers" in the  application.js  file.
...
//= require bootstrap-sprockets
//= require bootstrap-wysihtml5
//= require moment
//= require bootstrap-datetimepicker
//= require pickers
//= require_tree .

Step 6
Next, let's run the generator with the Font Awesome option.
    rails generate datetimepicker_rails:install Font-Awesome
    
Step 7
In order to install the momentjs-rails gem we need to require moment in our  application.js  file, but since we already did this in step 5, we don't need anything else.

git commit -m "Add more date gems"


#############
22
NEW REWARD FORM
Step 1
Let's start by generating the "rewards" controller.
We'll create the views manually, so we'll leave them out for now.

rails g controller rewards

Step 2
Users shouldn't see rewards when they're not logged in, so let's add a  before_action  inside the controller.
class RewardsController < ApplicationController
    
    before_action :authenticate_user!
    
end

Step 3
Let's take care of the routing.
We'll need to define a nested route, I'll explain why in the next step.
./config/routes.rb
BOF:
Rails.application.routes.draw do

  root 'projects#index'

  devise_for :users

  resources :projects do 
    resources :rewards, only: [:new, :create, :edit, :update, :destroy]
  end

  # The priority is based upo...
  
Step 4
If you run the following command, you'll see that we now have project_rewards paths, i.e.: new_project_reward and edit_project_reward.
That's the result of nesting  the rewards route inside the projects route.

      rake routes
      
Step 5
Since every reward belongs to a project, we need to set the project inside the controller.
So, let's create a new  private method  called set_project and let's invoke it in a  before_action .
./app/controllers/rewards_controller.rb
    class RewardsController < ApplicationController
    
      before_action :authenticate_user!
      before_action :set_project
    
      private
        def set_project
          @project = Project.find(params[:project_id])
        end
    
    end
    
Step 6
Now, let's create the controller's first action: "new".

./app/controllers/rewards_controller.rb
    class RewardsController < ApplicationController
    
      before_action :authenticate_user!
      before_action :set_project
    
      def new
        @reward = @project.rewards.build
        respond_to do |format|
          format.html 
        end
      end
    
      private
        def set_project
          @project = Project.find(params[:project_id])
        end
    
    end
    
Step 7
Let's create the actual template for this action.
touch app/views/rewards/new.html.erb

Step 8
And let's also create a "form" partial .
touch app/views/rewards/_form.html.erb

Step 9
The "new" template is going to be very simple, since the actual form is going to be inside the partial.
./app/views/rewards/new.html.erb
    <div class="container">
    	<h1>Add a new reward</h1>
    	<%= render 'form' %>
    </div>

Step 10
Inside our "form" partial, we're going to use the simple_form gem  once again.
Note that we're passing an array of arguments to the simple_form - we'll need both @project and @reward.
Also, note that we're using the datepicker-rails gem  on the estimated delivery field.
./app/views/rewards/_form.html.erb
    <%= simple_form_for([@project, @reward], html: { class: "form-horizontal" }) do |f| %>
    	<%= f.input :description %>
    	<%= f.input :value %>
    	<%= f.input :shipping %>
    	<%= f.input :number_available %>
    	<%= f.input :estimated_delivery, :as => :date_picker %>
    	<div class="action">
    		<%= f.button :submit %>
    	</div>
    	
    <% end %>

Step 11
Let's go back to the "projects" controller's  "show" view  and make some quick changes, so we can see this thing in action!
Remember when we were building our landing page, our links' destination was always the current page, since we didn't have the necessary paths. Now that we have them, let's correct the "Add Reward" link.

./app/views/projects/show.html.erb
<<EOF:
		<div class="col-md-4">
			<p>Rewards will be rendered in here ...</p>
			<%= link_to 'Add Reward', new_project_reward_path(@project), class: "btn btn-primary" %>
		</div>
	</div>
</div>

Step 12
Run the server and open your application.
rails s

Step 13
If you click on one of the landing page's projects, and then click on the "Add Reward" button at the bottom of the page, you'll see a new form.

Step 14
We still can't create rewards, but let's make sure our form is working properly.

git commit -m "Build New Reward form"

#############
23
CREATING NEW REWARDS

#############
24
UPDATING AND DELETING REWARDS

#############
25
STYLING THE VIEWS

#############
26
ADDING MISSING LINKS

#############
27
CREATING THE PLEDGE MODEL

#############
28
CONFIGURING THE CONTROLLER

#############
29
STYLING THE VIEWS - NEW

#############
30
STYLING THE VIEWS - INDEX

#############
31
PAYPAL'S BRAINTREE - HOW IT WORKS

#############
32
PAYPAL'S BRAINTREE - SETUP

#############
33
INSTALLING THE GEM

#############
34
CONFIGURING THE CONTROLLER

#############
35
FINISHING PAYMENTS AND PLEDGES

#############
36
BACKGROUND JOBS - SETUP

#############
37
INSTALLING THE GEMS

#############
38
EXTRAS - FRIENDLY IDs

#############
39
IMPLEMENTING CANCANCAN

#############
40
FINISHING TOUCHES


